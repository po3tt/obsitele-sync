from aiogram import types
from aiogram.filters import Command


import os
from pathlib import Path
from datetime import datetime
from aiogram import Router, types
from aiogram.types import InputFile
from aiogram.filters import Command
from aiogram import Bot  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import config
import logging
import asyncio
import pyzipper  
from typing import Optional


logger = logging.getLogger(__name__)
backup_router = Router()


async def create_zip_with_password(input_dir: Path, output_zip: Path, password: str):
    """–°–æ–∑–¥–∞–µ—Ç ZIP-–∞—Ä—Ö–∏–≤ —Å –ø–æ–ª–Ω—ã–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º (AES-256)"""
    try:
        with pyzipper.AESZipFile(
            output_zip, 
            'w', 
            compression=pyzipper.ZIP_DEFLATED,
            encryption=pyzipper.WZ_AES,
            compresslevel=9,
        ) as zipf:
            zipf.setpassword(password.encode('utf-8'))
            zipf.key_size = 256
            # –í–∫–ª—é—á–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤
            zipf.encrypt_names = True
            
            for root, dirs, files in os.walk(input_dir):
                for file in files:
                    file_path = Path(root) / file
                    # –®–∏—Ñ—Ä—É–µ–º –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    arcname = file_path.relative_to(input_dir).as_posix()
                    zipf.write(file_path, arcname=arcname)
                    
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}")
        return False



async def handle_backup(message: types.Message, bot: Bot):
    try:
        if not os.path.exists(config.OBSIDIAN_PATH):
            await message.answer("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        if not config.BACKUP_PASSWORD:
            await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –¥–ª—è –∞—Ä—Ö–∏–≤–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ!")
            return

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        backup_dir = Path(config.BACKUP_DIR)
        backup_dir.mkdir(parents=True, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        zip_filename = backup_dir / f"obsidian_backup_{timestamp}.zip"
        
        await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
        
        success = await create_zip_with_password(
            input_dir=Path(config.OBSIDIAN_PATH),
            output_zip=zip_filename, 
            password=config.BACKUP_PASSWORD
        )
        
        if not success:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤!")
            return
            
        await message.answer("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ backup: {str(e)}", exc_info=True)
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


async def auto_save_backups(bot: Bot):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    while True:
        try:
            if not config.BACKUP_AUTO_SAVE or config.BACKUP_AUTO_SAVE <= 0:
                await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ —á–∞—Å, –µ—Å–ª–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ
                continue

            interval = config.BACKUP_AUTO_SAVE * 3600  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –≤ —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(interval)

            if not os.path.exists(config.OBSIDIAN_PATH):
                logger.error("–ê–≤—Ç–æ-–±—ç–∫–∞–ø: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Obsidian –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                continue

            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –±—ç–∫–∞–ø–∞
            backup_dir = Path(config.BACKUP_DIR)
            backup_dir.mkdir(parents=True, exist_ok=True)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            zip_filename = backup_dir / f"auto_backup_{timestamp}.zip"

            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
            success = await create_zip_with_password(
                input_dir=Path(config.OBSIDIAN_PATH),
                output_zip=zip_filename, 
                password=config.BACKUP_PASSWORD
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if success:
                msg = f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {timestamp}"
                await bot.send_message(config.ADMIN_CHAT_ID, msg)
                logger.info(msg)
                
                # –í—ã–∑—ã–≤–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
                await cleanup_backups()
            else:
                await bot.send_message(config.ADMIN_CHAT_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø!")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ auto_save_backups: {str(e)}")
            await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
async def cleanup_backups():
    try:
        backup_dir = Path(config.BACKUP_DIR)
        now = datetime.now()
        backups = sorted(backup_dir.glob("*.zip"), key=os.path.getmtime)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
        if hasattr(config, 'BACKUP_MAX_AGE'):
            for file in backups:
                file_time = datetime.fromtimestamp(file.stat().st_mtime)
                if (now - file_time).days > config.BACKUP_MAX_AGE:
                    file.unlink()
                    
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ)
        if hasattr(config, 'BACKUP_MAX_COUNT'):
            while len(backups) > config.BACKUP_MAX_COUNT:
                oldest = backups.pop(0)
                oldest.unlink()
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—ç–∫–∞–ø–æ–≤: {str(e)}")

def register_backup_handlers(dp):
    dp.message.register(handle_backup, Command("backup"))



from utils.reminder_utils import ReminderParser

# –î–æ–±–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
async def check_and_notify_reminders(bot: Bot):
    parser = ReminderParser(Path(config.OBSIDIAN_PATH))
    while True:
        try:
            events = parser.check_reminders()
            for event in events:
                await bot.send_message(
                    config.ADMIN_CHAT_ID,
                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n{event}"
                )
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logger.error(f"Reminder error: {str(e)}")
            await asyncio.sleep(300)

def register_reminder_handlers(dp):
    dp.startup.register(start_reminder_checker)

async def start_reminder_checker(bot: Bot):
    asyncio.create_task(check_and_notify_reminders(bot))





async def start_handler(message: types.Message):
    await message.answer("üìö –ë–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Obsidian –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

def register_base_handlers(dp):
    dp.message.register(start_handler, Command("start"))